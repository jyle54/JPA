JPA persistence API

- Java API for saving object into database
- ORM = Object Relation Mapping type of API
- common option JDBC Java Database Connection API (part of the JDK 1.0, 1995)
- Java database Driver is needed always to connect to database

Kirja: 
- Java EE recepies (Josh Juneau), chapter 8 - 10 (EJB rather simple comparing to JPA)
- Amazon.com - material
- Leanpub.com - some free books
-----------------------------------
Courses in the web:
- Udemy.com - Video lectures mainly - some courses includes more training
- Code School - courses
--------------------
h2datab: jdbc:h2:tcp://localhost:9092/mem:jpatest
-----------------------------------
Internet:

https://www.tutorialspoint.com/jpa/jpa_introduction.htm

-----------------------

JPA - framework to save data to database

- put keyword "ORM" into Google.
- lot of SW (Java, .NET, PHP)
-------------------------------
Why we need this SW layer?

- extra layer in your SW
- more memory, more code, slower..
- We aleady have JDBC to connect and save and read/update/delete data
- JPA 1.0 2006, JPA 2.0 2009, comparing to JDBC rather new
- not much existing SW to use them
- JDBC & JPA standard specs =>can be used with different products and application server
- Jetty, Websphere, Tomcat, weblogic, glassfish..

Database ranking:
http://db-engines.com/en/ranking
How many database these professionals calls "database admins" knows well ? 1-2
Data is more important than code for business companies

ORM makes developpers to do code to save it in the database. They are more important to companies.
SQL is very important term to put in CV.

--------------------
Web/Ebterprise programmer

ORM technology ?
How you save data to database using JPA ?
Is it possible to link java code directly into database ?

java 			ORM			Database (relational, object, document)
Objects 	<------------>	Tables

All is working: It creates tables, save/update/delete datam query data
80% of things can be done with ORM, (20% maybe not needed)

JPA programming 
- starting quick and easy
- basic knowledge of Java is needed
- annotation, queries (JPQL) so SQL basic is good to know
- with any database
- we use H2 database
- Java standard edition first to start with JPA
- JPA works with any desktop apps (not with mobile apps, memory issue maybe?)
- Enterprise edition you have to use some component technigue (like EJB)
--------------------
Entity manager pitää olla jotta voidaan tallentaa databaseen
Transaction, tapahtuma, 
jpa class:
@javax.persistence.Entity 
@javax.persistence.Id
esim:
@Entity
public class Customer {
  @Id Private Long id; // autogenerated
 
  Private Long id;
  private String firstname;
  private String lastname;
  private string telephone;
  private String email;
  private Integer age;
  // pakollinen konstruktori
  // getter, setters ominaisuuksille
}
entity luokka luo automaattisesti customer taulukon
ID (bigint)
FIRSTNAME (varchar(255))
LASTNAME (varchar(255))
TELEPHONE (varchar(255))
EMAIL (varchar(255))
AGE (integer)
---------------
JPQL: kysely entiteettejä, pitää tietää hyvin
SELECT c FROM Customer c WHERE c.email='admin@jpaservice.fi'
SELECT c.firstName, c.sureName, c.email from Customer c
SELECT c.firstName, c.sureName, c.email from Customer c where c.lastName="Jansson" and c.firstName="Bill"
SELECT c.firstName, c.sureName, c.email from Customer c where c.lastName LIKE "%son%"

@javax.persistence.Entity
Customer {
	@javax.persistence.Id private long id;
	private String firstname, lastName, email;
	// getter & setter & constructor, toString() ..
}
---------------
persistence.xml
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
 unit name = entity manager määrityksessä annettu, slide 20 
 <persistence-unit name="MUST CHANGE" transaction-type="RESOURCE_LOCAL">
kaikki luokat jotka laitetaan db, määritellään tässä:
 <class>ADD_YOUR_ENTITY_CLASS_WITH_PACKAGE_NAME</class>
 <class>ADD_YOUR_ENTITY_CLASS_WITH_PACKAGE_NAME</class>
 <class>ADD_YOUR_ENTITY_CLASS_WITH_PACKAGE_NAME</class>
 esim. jpaderby.BookTest
 =>nämä vain muutetaan persistance.xml filessä, unit name ja luokan nimi

    javax.persistence.jdbc.url
    javax.persistence.jdbc.driver
    javax.persistence.jdbc.user
    javax.persistence.jdbc.password

persistance xml:ssä:
  <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sample"/>
      <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver"/>
      <property name="javax.persistence.jdbc.user" value="app"/>
      <property name="javax.persistence.jdbc.password" value="app"/>

JAVA SE / JPA Application
public static void main(String args[]) { 
Mandatory steps to save data to db:
EntityManagerFactory factory = Persistence.createEntityManagerFactory( "Persistance_unit_name");
    // manager to really connect to db
    EntityManager manager = factory.createEntityManager();
    // everything CUD should be inside transaction
    EntityTransaction tr = manager.getTransaction();
    tr.begin();
    manager.persist(SoftFactory); // persist the entity 
    manager.persist(SoftFactory2); // persist the entity 
    manager.persist(SoftFactory3); // persist the entity 
    or loop read objects from the array or arraylist
    tr.commit();
    System.out.println(SteelFactory);
    // if error then cancel: tr.rollback()
}
// ArrayList<Student> oppilaslista = new ArrayList<Student>();
// oppilaslista.add(new Student(id, name, demo, koe));
// jsf-h5, students.java
-----------------------------------------
//@Column, column nimeä voidaan muuttaa
commit käskyllä muutos menee databaseen
-------------------------
JPA 23.11

Relationships between entities:
- Java Object and relational database to save these objects
- Biggest issue: 
	- Object model and relationla model are not compability
	- JPA entities try to solve this problem in the programming language level (not in database level)
	- JPA entities can be saved directly into database (and tehy can create new tables and relationships between them)
	- saving info to file is easy, but not possible to use at the same time with many users, not useful with server side programs
	- if you have 10 000 connection at the same time in server application, you can not use file (or even small database)
	- only possible is to use some database system (it can be also on sql database, mongo, cassandra)
----------------------------------------------

Company has employees, Owners, Clients
How to model this kind of relationships (only using Java classes)

@Entity
Class Company {
	List<Employee> employees //many employees in company, one to many (one direction)
	List<Owners> owners 	// many owners in company, one to many (one direction)
	List<Clinets> clients 	// many clients in company, one to many (one direction)
	// other properties like name, business id, address, business category etc...
}

@Entity
class Employee {
	// some properties name, personal_id, home_address, email, phone, salary, working hours etc...
	// many to one 
}

@Entity
class Owner {
	// some properties name, personal_id, home_address, email, phone, salary (optional), bonus etc...
	// many to one
}

@Entity
class ClientCompany {
	// some properties name, business id, address, business category, contact_person etc...
	ContactPerson contactPerson // or collection of the <ContactPerson> contactPerson
	// one to one, (one direction)
}

@Entity
class ContactPerson {
	// some properties name, email etc...
}
=> how to save all these data to database?
- JDBC you have to make DAO, DTD objects (Data Access Objects, Data Transfer Objects)
- JPA you can directly model your java objects into database (also save, update, remove and query databases)
- aina ensin ilman annotaatiota ja sitten annotaation kanssa, annotaatiot menee helposti pieleen
Best way to model JPA objects ?
- Do class diagrams
- Use object oriented design with normal java classes

1. pom file
- <artifactid>compiled jar package</artifactid>
2. use right structure to your code
java source src/main/java
resource src/main/resource
meta inf //persistence xml should be under resource folder

TypedQuery<Country> query = em.createQuery(
"Select c FROM Country c WHERE c.name =:countryName", Country.class);
Country c = query.setParameter("CountryName", "Finland").getSingleResult();

List<Country> countrylist = query.setParameter("name", "%JSP%").getResultlist();
------
itemin poisto:
	@SuppressWarnings("unchecked")
			List<Book> entiteetit2 = manageri.createNamedQuery("etsiNimella").getResultList();
	        transaktio.begin(); // transaktio pitää aloittaa jotta voidaan poistaa
			System.out.println();
			System.out.println("Java EE-alkuiset kirjat ");
			for (Book e : entiteetit2) {
	            System.out.println("Rivi: " + e.getName() );
				manageri.remove(e);
	        }
			transaktio.commit();
----
yhden itemin haku
 
			Book tulos = new Book();
	        String name = "Java: A Beginner's Guide";
			TypedQuery<Book> query = manageri.createQuery(
			        "SELECT c FROM Book c WHERE c.name = :name", Book.class);
			 tulos = query.setParameter("name", name).getSingleResult();
			System.out.println(tulos);

-----------
Listan tulostus:
String name2 = "%Java%";
			TypedQuery<Book> query2 = manageri.createQuery(
			        "SELECT c FROM Book c WHERE c.name LIKE :name", Book.class);
			List<Book> tuloslist = query2.setParameter("name", name2).getResultList();
			System.out.println();
			System.out.println("Haetaan kaikki kirjat, joiden nimessä on Java ");
			System.out.println();
			for (Book e: tuloslist) {
		            System.out.println("Rivi: " + e.getName() );
				}
---------------------------------------------

@NamedQueries({
@NamedQuery(name = "selectAll", query = "SELECT b from Book b"),
@NamedQuery(name = "searchAllBooks", query = "SELECT b from Book b ORDER BY b.name DESC"),
@NamedQuery(name = "etsiNimella", query = "SELECT b from Book b where b.name like 'Java EE%'"),
@NamedQuery(name = "etsiNimella2", query = "SELECT b from Book b where b.name like 'Java 8%'")
//@NamedQuery(name = "selectAllOrder2", query = "SELECT b from Book b ORDER BY lang.name")
})	
-----------------------------------------
Hakuja:
       @SuppressWarnings("unchecked")
			List<Book> entiteetit = manageri.createNamedQuery("selectAll").getResultList();
	        for (Book e : entiteetit) {
	            System.out.println("Rivi: " + e.getName() );
	        }
	        
	        @SuppressWarnings("unchecked")
	        List<Book> books = manageri.createNamedQuery("searchAllBooks").getResultList();
	        System.out.println();
	        for (Book e : books) {
	        System.out.println("Rivi: " + e.getName() );
	        }
	      /*  
	        TypedQuery<String> kysely = manageri.createQuery(
					"SELECT bk.name FROM Book AS bk where bk.name LIKE 'Java 8%'",
					String.class);
			List<String> haetut = kysely.getResultList();
			System.out.println();
			System.out.println("Java 8-alkuiset kirjat ");
			for (String tulos : haetut) {
				System.out.println(tulos);
			}
	    */
			@SuppressWarnings("unchecked")
				List<Book> entiteetit3 = manageri.createNamedQuery("etsiNimella2").getResultList();
			System.out.println();
			System.out.println("Java 8-alkuiset kirjat ");    
			for (Book e : entiteetit3) {
		            System.out.println("Rivi: " + e.getName() );
		        }
-------------------------------------------------
Book good example for remote exercise 1-3
palautus: Friday 8 pm
--------------------------
JSF example

jsf2.2 examples
application with three layers
UI 				src/main/webapp index.html
business 		@stateless // statelesass makes it ejb
				public class TietokoneJpa 
persistence 	Tietokone
				- @managedbean, @RequestScoped, it also managed bean for JSF
				- @entity saves it to db

Persistence.xml
	- unit_name "jsf_jpa_tietokone" transaction-type="JTA"
	Type must be JTA (it is also default)

@persistenceContext(unitName ="jsf_jpa_tietokone" ) // tietokone.jpa.java luokassa
private EntityManager em; // nothing works if wrong name is used for unit
--------------------------------------------
Tietokonecontroller:
public class TietokoneController {
	// olio sisältää datan tallennuksen ja haun tietokannasta JPA:lla
	@EJB // EJB component
	private TietokoneJpa tkJpa;

	@ManagedProperty(value = "#{tietokone}")  // tietokone component inside jsf page // stateless anotation
	private Tietokone tietokone; // tama tietokone on eri asia kuin tietokone component

-------------------
kill process
ps aux | grep 2, tulostaa listan prosesseista
ja ne voi poistaa kill rivinumero
------------------------
